// schema.prisma
// Project Management App (ClickUp / Jira style)
// NextAuth compatible + Full Features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  avatar         String?
  password      String?
  themeColor String?

  accounts Account[]
  sessions Session[]

  memberships Membership[]
  tasks       Task[]       @relation("AssignedTasks")
  comments    Comment[]
  // notifications Notification[]
  // activities    Activity[]
  // timeLogs      TimeLog[]
  TeamMember  TeamMember[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

//
// ========================
// CORE MODELS
// ========================
//

model Workspace {
  id          String  @id @default(cuid())
  name        String
  description String?
  avatar      String?

  createdAt DateTime @default(now())

  useFor                 String?
  manageFor              String?
  hasCompletedOnboarding Boolean @default(false)

  memberships Membership[]
  projects    Project[]
  Label       Label[]
  Team        Team[]
}

model Space {
  id          String  @id @default(cuid())
  name        String?
  icon        String?
  description String?

  DefaultRole Role       @default(MEMBER)
  visibility  Visibility @default(PUBLIC)
}

model Membership {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())

  userId      String
  workspaceId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  visibility  Visibility @default(PRIVATE)
  createdAt   DateTime   @default(now())

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  tasks  Task[]
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id])

  // Self-relation for subtasks
  parentId String?
  parent   Task?   @relation("SubTasks", fields: [parentId], references: [id])
  subtasks Task[]  @relation("SubTasks")

  comments Comment[]
  labels   TaskLabel[]
  // activities Activity[]
  // timeLogs   TimeLog[]
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Label {
  id    String @id @default(cuid())
  name  String
  color String

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  tasks TaskLabel[]
}

model TaskLabel {
  taskId  String
  labelId String

  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  createdAt   DateTime @default(now())

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  members TeamMember[]
  Project Project[]
}

model TeamMember {
  id        String   @id @default(cuid())
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())

  userId String
  teamId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

enum TeamRole {
  LEAD
  MEMBER
  VIEWER
}

//
// ========================
// ADVANCED FEATURES
// ========================
//

// model Notification {
//   id        String   @id @default(cuid())
//   message   String
//   read      Boolean  @default(false)
//   createdAt DateTime @default(now())

//   userId String
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Activity {
//   id        String   @id @default(cuid())
//   action    String   // e.g., "CREATED_TASK", "UPDATED_STATUS"
//   createdAt DateTime @default(now())

//   taskId String?
//   task   Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

//   userId String
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model TimeLog {
//   id        String   @id @default(cuid())
//   hours     Float
//   createdAt DateTime @default(now())

//   taskId String
//   task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

//   userId String
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
